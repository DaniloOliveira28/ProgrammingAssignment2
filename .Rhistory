a <- available.pavkages()
a <- available.packages()
head(rownames(a), 3)
head(rownames(a), 10)
head(rownames(a), 100)
a <- available.packages("KernSmooth R package")
a <- available.packages("KernSmooth R")
a <- available.packages("KernSmooth")
head(rownames(k), 100)
head(rownames(a), 100)
install.packages("KernSmooth")
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
setwd(/Users/DaniloOliveira/Workspace/DataScience)
setwd(/Users/DaniloOliveira/Workspace/DataScience/)
setwd("/Users/DaniloOliveira/Workspace/DataScience")
getwd()
source("makeVector")
source("makeVector.R")
makeVector
makeVector()
as.numeric(factor(5:10))
as
as
aux <- as.numeric(factor(5:10))
aux
makevector(aux)
makeVector(aux)
source("makeVector.R")
aux <- makeVector()
cachemean(aux)
aux <- makeVector(factor(5:10))
aux
cachemean(aux)
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:2))
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000))
source("makeVector.R")
source("makeVector.R")
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000), makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000))
source("makeVector.R")
cachemean(makeVector(x = 1:1000000000))
cachemean(makeVector(x = 1:1000000000))
GETWD()
getwd()
setwd("/Users/DaniloOliveira/Workspace/DataScience")
setwd("/Users/DaniloOliveira/Workspace/DataScience/ProgrammingAssignment2")
source("cachematrix.R")
cacheSolve(A = matrix( c(2, 4, 3, 1, 5, 7, 8, 9, 0), nrow=3, ncol=3, byrow = TRUE))
cacheSolve(matrix( c(2, 4, 3, 1, 5, 7, 8, 9, 0), nrow=3, ncol=3, byrow = TRUE))
library(datasets)
data(iris)
?iris
iris
iris@Species
iris@setosa
colMeans(iris)
iris3
iris3$Setosa
iris3[1]
iris3[1,]
iris3[1,,]
iris3[,,1]
iris3
iris3[1,,]
iris3[,,1]
colMeans(m)
colMeans(iris3[,,1])
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 3:4], 2, mean)
apply(iris[, 1:4,1], 2, mean)
apply(iris[, 1:4, 1 ], 2, mean)
apply(iris[, , 1 ], 2, mean)
apply(iris[, 1, 1 ], 2, mean)
apply(iris[, 1:2, 1 ], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, mean))
with(mtcars, tapply(hp, mean))
debug(ls)
ls
debug(ls)
ls(1)
exit
q
quit
exit()
quit(0)
